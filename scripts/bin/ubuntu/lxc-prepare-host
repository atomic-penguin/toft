#!/bin/bash

username=`id -nu`	
if [ ! "$username" = "root" ]; then
	echo "This command has to be run as root!"
	exit 1
fi

OS=`cat /etc/issue | cut -f 1 -d " " -s`


gateway_ip="192.168.20.1"
subnet="192.168.20.0"
netmask="255.255.255.0"
range="192.168.20.2 192.168.20.254"
domain=foo

# setup bridge and nat
if [[ ! `ip link ls dev br0` ]]; then
	brctl addbr br0
	ifconfig br0 $gateway_ip netmask $netmask up
	iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
	sysctl -w net.ipv4.ip_forward=1
fi

if [[ ! `grep "auto br0" /etc/network/interfaces` ]]; then
	cat <<EOF >> /etc/network/interfaces
auto br0
iface br0 inet static
address $gateway_ip
netmask $netmask
bridge_stp off
bridge_maxwait 5
pre-up brctl addbr br0
post-up /usr/sbin/brctl setfd br0 0
EOF
fi

sudo sed -i "s/#*[ ^I]*net\.ipv4\.ip_forward[ ^I]*=[ ^I]*[01]/net\.ipv4\.ip_forward = 1/" /etc/sysctl.conf

iptables-save > /etc/firewall.conf
echo "#!/bin/sh" > /etc/network/if-up.d/iptables 
echo "iptables-restore < /etc/firewall.conf" >> /etc/network/if-up.d/iptables 
chmod +x /etc/network/if-up.d/iptables

# setup cgroup
if [[ ! -d /cgroup ]]; then
	mkdir -p /cgroup
fi

if [[ ! `mount | grep cgroup` ]]; then
	mount none -t cgroup /cgroup
fi

if [[ ! `grep "/cgroup" /etc/fstab` ]]; then
	cat <<EOF >> /etc/fstab
none /cgroup cgroup defaults 0 0
EOF
fi

# setup nameserver
cat <<EOF > /etc/bind/db.foo
\$ORIGIN $domain.
\$TTL 7200	; 2 hours
@				IN SOA	ns1.$domain. hostmaster.$domain. (
				3641625943 ; serial
				36000      ; refresh (10 hours)
				900        ; retry (15 minutes)
				36000      ; expire (10 hours)
				7200       ; minimum (2 hours)
				)
			NS	ns1.$domain.
ns1		A	$gateway_ip
EOF

cat <<EOF > /etc/bind/named.conf.$domain
zone "$domain" in{
	type master;
	file "/etc/bind/db.$domain";
	allow-update {any;};
};
EOF

## set bind to forward original nameservers
original_nameservers=`grep nameserver /etc/resolv.conf | cut -d " " -f2 | sed s/$gateway_ip//`
bind_forward_options=''
if [[ -n `echo $original_nameservers | tr -d ' \n\t\r'` ]]; then
	bind_forward_options="forwarders {
		`echo $original_nameservers | xargs -n 1 | awk '{ print $1";" }'`	
	};
	forward first;"
fi

cat <<EOF > /etc/bind/named.conf.options.foo
options {
	directory "/var/cache/bind";
	$bind_forward_options
	auth-nxdomain no;    # conform to RFC1035
	listen-on-v6 { any; };
};
EOF

# debian bind9 package does not have this default-zones file
# add this file to make it consistent between debian and ubuntu
cat <<EOF > /etc/bind/named.conf.default-zones
// prime the server with knowledge of the root servers
zone "." {
	type hint;
	file "/etc/bind/db.root";
};

// be authoritative for the localhost forward and reverse zones, and for
// broadcast zones as per RFC 1912

zone "localhost" {
	type master;
	file "/etc/bind/db.local";
};

zone "127.in-addr.arpa" {
	type master;
	file "/etc/bind/db.127";
};

zone "0.in-addr.arpa" {
	type master;
	file "/etc/bind/db.0";
};

zone "255.in-addr.arpa" {
	type master;
	file "/etc/bind/db.255";
};
EOF

mv /etc/bind/named.conf /etc/bind/named.conf.old
cat <<EOF > /etc/bind/named.conf
include "/etc/bind/named.conf.options.foo";
include "/etc/bind/named.conf.local";
include "/etc/bind/named.conf.default-zones";
include "/etc/bind/named.conf.$domain";
EOF

sudo chmod 775 /etc/bind

/etc/init.d/bind9 restart

# add our nameserver into /etc/resolv.conf
if [[ ! `grep "nameserver $gateway_ip" /etc/resolv.conf` ]]; then
	cp /etc/resolv.conf /etc/resolv.conf.old
	cat <<EOF > /etc/resolv.conf
nameserver $gateway_ip
`cat /etc/resolv.conf`
EOF
fi

# setup dhcp server
if [[ $OS = "Ubuntu" ]]; then
	dhcp_conf_dir=dhcp
	dhcp_daemon=isc-dhcp-server
else
	dhcp_conf_dir=dhcp3
	dhcp_daemon=dhcp3-server
fi

mv /etc/$dhcp_conf_dir/dhcpd.conf /etc/$dhcp_conf_dir/dhcpd.conf.old
cat <<EOF > /etc/$dhcp_conf_dir/dhcpd.conf
ddns-updates on;
ddns-update-style interim;

ddns-domainname "$domain.";
option domain-name "$domain.";
option domain-name-servers $gateway_ip;

option ntp-servers $gateway_ip;
default-lease-time 600;
max-lease-time 7200;

authoritative;
log-facility local7;

zone $domain. {
   primary localhost;
}

subnet $subnet netmask $netmask {
   range $range;
   option routers $gateway_ip;
}
EOF
sudo /etc/init.d/$dhcp_daemon restart

sudo apt-get install puppet
